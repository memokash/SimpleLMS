// firestore.rules - Complete Medical Education Platform Security Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===================================================================
    // HELPER FUNCTIONS
    // ===================================================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function hasAdminRole() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function hasSubscription(plan) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/subscriptions/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/subscriptions/$(request.auth.uid)).data.plan == plan &&
        get(/databases/$(database)/documents/subscriptions/$(request.auth.uid)).data.status == 'active';
    }
    
    function hasProOrPremium() {
      return hasSubscription('pro') || hasSubscription('premium');
    }
    
    function hasPremium() {
      return hasSubscription('premium');
    }
    
    function isProfilePublic(userId) {
      return exists(/databases/$(database)/documents/profiles/$(userId)) &&
        get(/databases/$(database)/documents/profiles/$(userId)).data.privacy.showStatus == 'public';
    }
    
    function isProfileForColleagues(userId) {
      return exists(/databases/$(database)/documents/profiles/$(userId)) &&
        (get(/databases/$(database)/documents/profiles/$(userId)).data.privacy.showStatus == 'public' ||
         get(/databases/$(database)/documents/profiles/$(userId)).data.privacy.showStatus == 'colleagues');
    }

    // ===================================================================
    // MEDICAL PROFILES & SUBSCRIPTION SYSTEM
    // ===================================================================
    
    // Medical Profiles - Enhanced with subscription awareness
    match /profiles/{userId} {
      // Users can read and write their own profile
      allow read, write: if isOwner(userId);
      
      // Medical colleagues can read profiles based on privacy settings
      allow read: if isAuthenticated() && isProfileForColleagues(userId);
      
      // Admins can read all profiles
      allow read: if hasAdminRole();
    }
    
    // Subscription Management - Users can only access their own
    match /subscriptions/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if hasAdminRole(); // Admins can read for support
    }
    
    // Daily Quiz Attempts - Free users have daily limits
    match /dailyQuizAttempts/{attemptId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
    }
    
    // Invitations and Referral System
    match /invitations/{invitationId} {
      // Users can read invitations they sent
      allow read: if isAuthenticated() && 
        resource.data.senderUserId == request.auth.uid;
      
      // Users can read invitations sent to their email
      allow read: if isAuthenticated() && 
        resource.data.recipientEmail == request.auth.token.email;
      
      // Only authenticated users can create invitations
      allow create: if isAuthenticated() &&
        request.resource.data.senderUserId == request.auth.uid;
      
      // Users can update invitations they sent (for status changes)
      allow update: if isAuthenticated() && 
        resource.data.senderUserId == request.auth.uid;
    }

    // ===================================================================
    // COURSES & QUIZ SYSTEM
    // ===================================================================
    
    // Courses Collection (supports metadata: imageURL, level, tags, etc.)
    match /courses/{courseId} {
      allow read: if true; // Public courses for discovery
      allow write: if isAuthenticated() || hasAdminRole();
      
      // Course Questions
      match /questions/{questionId} {
        allow read: if true; // Allow preview of questions
        allow write: if isAuthenticated() || hasAdminRole();
      }
    }
    
    // Premium Question Bank - Community-driven, moderated content
    match /questionBank/{questionId} {
      // Only Pro/Premium users can read published questions
      allow read: if isAuthenticated() && 
        hasProOrPremium() &&
        resource.data.published == true;
      
      // Pro/Premium users can create questions
      allow create: if isAuthenticated() &&
        hasProOrPremium() &&
        request.resource.data.createdBy == request.auth.uid;
      
      // Question creators and moderators can update
      allow update: if isAuthenticated() &&
        hasProOrPremium() &&
        (request.auth.uid == resource.data.createdBy || 
         request.auth.uid in resource.data.moderators ||
         hasAdminRole());
      
      // Only creators and admins can delete
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.createdBy || hasAdminRole());
    }
    
    // Quiz Results - Users can only access their own
    match /quizResults/{resultId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
    }
    
    // User Progress Tracking
    match /userProgress/{progressId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
    }

    // ===================================================================
    // PREMIUM FEATURES
    // ===================================================================
    
    // AI Tutoring Sessions - Premium only
    match /aiTutoringSessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        hasPremium();
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        hasPremium();
    }
    
    // Custom Study Plans - Premium only
    match /customStudyPlans/{planId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        hasPremium();
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        hasPremium();
    }
    
    // Cross-institutional Messaging - Pro+ feature
    match /messages/{messageId} {
      // Can read if you're a participant and have Pro+
      allow read: if isAuthenticated() &&
        hasProOrPremium() &&
        request.auth.uid in resource.data.participants;
      
      // Can create if you have Pro+ and you're a participant
      allow create: if isAuthenticated() && 
        hasProOrPremium() &&
        request.auth.uid in request.resource.data.participants;
      
      // Can update your own messages
      allow update: if isAuthenticated() && 
        hasProOrPremium() &&
        request.auth.uid == resource.data.senderId;
      
      // Can delete your own messages or if admin
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.senderId || hasAdminRole());
    }
    
    // Message Threads for cross-institutional communication
    match /messageThreads/{threadId} {
      allow read, write: if isAuthenticated() &&
        hasProOrPremium() &&
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() &&
        hasProOrPremium() &&
        request.auth.uid in request.resource.data.participants;
    }

    // ===================================================================
    // STUDY GROUPS & COLLABORATION
    // ===================================================================
    
    // Study Groups
    match /studyGroups/{groupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.createdBy || 
         request.auth.uid in resource.data.members ||
         hasAdminRole());
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.createdBy || hasAdminRole());
      
      // Study Group Messages
      match /messages/{messageId} {
        allow read: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/studyGroups/$(groupId)).data.members;
        allow create: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/studyGroups/$(groupId)).data.members;
      }
    }

    // ===================================================================
    // MEDICAL EDUCATION SPECIFIC
    // ===================================================================
    
    // Student Rotations
    match /rotations/{rotationId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      
      // Allow colleagues to see rotation info if privacy allows
      allow read: if isAuthenticated() &&
        isProfileForColleagues(resource.data.userId);
    }
    
    // Medical Events/Calendar
    match /events/{eventId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
    }
    
    // Clinical Rounding Tools - H&P, Progress Notes, Procedures
    match /roundingNotes/{noteId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
    }
    
    // Reading Resources - Save and annotate articles
    match /readingResources/{resourceId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
    }

    // ===================================================================
    // USER MANAGEMENT
    // ===================================================================
    
    // User Documents (basic auth info)
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      allow create: if isOwner(userId);
    }
    
    // User Analytics - Pro+ feature for detailed analytics
    match /userAnalytics/{userId} {
      allow read, write: if isOwner(userId) && hasProOrPremium();
      allow read: if hasAdminRole();
    }

    // ===================================================================
    // ADMIN & SYSTEM
    // ===================================================================
    
    // Admin-only documents
    match /admin/{document=**} {
      allow read, write: if hasAdminRole();
    }
    
    // System Announcements
    match /announcements/{announcementId} {
      allow read: if true; // Public announcements
      allow write: if hasAdminRole();
    }
    
    // Feedback and Support
    match /feedback/{feedbackId} {
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || hasAdminRole());
      allow update: if hasAdminRole(); // Admin can update status
    }
    
    // System Metrics (for admin dashboard)
    match /metrics/{metricId} {
      allow read, write: if hasAdminRole();
    }

    // ===================================================================
    // TESTING & DEVELOPMENT
    // ===================================================================
    
    // Test documents (for development)
    match /test/{testId} {
      allow read, write: if isAuthenticated();
    }
    
    // Feature Flags
    match /featureFlags/{flagId} {
      allow read: if isAuthenticated();
      allow write: if hasAdminRole();
    }

    // ===================================================================
    // PAYMENT & BILLING (Read-only for security)
    // ===================================================================
    
    // Payment Records (read-only, managed by Stripe webhooks)
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      // No write access - managed by server-side functions only
    }
    
    // Billing History
    match /billingHistory/{recordId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      // No write access - managed by Stripe webhooks
    }

    // ===================================================================
    // LEGACY COMPATIBILITY
    // ===================================================================
    
    // Legacy tier system support (for migration)
    match /users/{userId} {
      // Allow reading tier for backward compatibility
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
  }
}

// ===================================================================
// STORAGE RULES (Companion file: storage.rules)
// ===================================================================
/*
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Profile pictures
    match /profile-pictures/{userId}/{allPaths=**} {
      // Users can upload/read/delete their own profile pictures
      allow read, write, delete: if request.auth != null && 
        request.auth.uid == userId;
      
      // Anyone authenticated can read profile pictures (for colleague discovery)
      allow read: if request.auth != null;
    }
    
    // Course materials and images
    match /course-materials/{courseId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Course creators and admins
    }
    
    // User-uploaded study materials - Pro+ feature
    match /study-materials/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        // Check if user has Pro+ subscription
        exists(/databases/$(database)/documents/subscriptions/$(userId)) &&
        get(/databases/$(database)/documents/subscriptions/$(userId)).data.plan in ['pro', 'premium'] &&
        get(/databases/$(database)/documents/subscriptions/$(userId)).data.status == 'active';
    }
    
    // Shared group materials
    match /group-materials/{groupId}/{allPaths=**} {
      allow read, write: if request.auth != null;
      // Additional group membership check would need to be implemented
    }
  }
}
*/